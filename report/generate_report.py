import subprocess
import tempfile

templateFname = """
# Report

Current Commit: {commit}

Report generated by {user} on {date} on a machine with:
* CPU: {cpu}
* GPU: {gpu}
* RAM: {ram}

## Build

Compiler version: {compiler}

Status: {build_status}

## Test

Status: {test_status}

"""

class ConfigBuildTestCoverage:
    def __init__(self):
        self.work_dir = tempfile.TemporaryDirectory(dir='.')

        # cmake and build
        self.build_status = subprocess.run('cmake ../../ && make -j`nproc`', cwd=self.work_dir.name, shell=True)

        # run tests
        self.test_status = subprocess.run(['make', 'test'], cwd=self.work_dir.name)

        # run coverage

    def get_build_status(self):
        if self.build_status.returncode == 0:
            return 'OK'
        return 'Failed'

    def get_test_status(self):
        if self.test_status.returncode == 0:
            return 'OK'
        return 'Failed'

    def get_coverage_status(self):
        return 'N/A'

    def close(self):
        self.work_dir.cleanup()

def read_stdout_from_shell_cmd(cmd):
    proc = subprocess.Popen([cmd],stdout=subprocess.PIPE, shell=True)
    while True:
        line = proc.stdout.readline()
        break
    return str(line.strip(), 'utf-8')

def generate_report(test):
    return templateFname.format(
        commit=read_stdout_from_shell_cmd('git rev-parse HEAD'),
        user=read_stdout_from_shell_cmd('git config user.name'),
        date=read_stdout_from_shell_cmd('date'),
        cpu=read_stdout_from_shell_cmd('lscpu | grep \'Model name\' | tr -s \' \' | cut -d\' \' -f 1,2 --complement'),
        gpu=read_stdout_from_shell_cmd('lspci | grep VGA | cut -d\':\' -f3'),
        ram='{0} GB'.format(read_stdout_from_shell_cmd('free -g -t | grep Total | tr -s \' \' | cut -d\' \' -f2')),
        compiler=read_stdout_from_shell_cmd('g++ --version'),
        build_status=test.get_build_status(),
        test_status=test.get_test_status(),
        coverage_status=test.get_coverage_status())

test = ConfigBuildTestCoverage()
with open('README.md', 'w') as f:
    f.write(generate_report(test))
test.close()
